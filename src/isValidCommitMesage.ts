const DEFAULT_COMMIT_TYPES = [
    "feat",
    "fix",
    "perf",
    "refactor",
    "deprecate",
    "remove",
    "test",
    "build",
    "ci",
    "docs",
    "style",
    "revert",
    "chore"
];

/** types that never correlate with a semantic versioning change*/
const NONE_COMMIT_TYPES = [
    "style",
    "ci",
    "test",
];

/** types that correlates with MINOR in semantic versioning */
const MINOR_COMMIT_TYPES = [
    "feat",
    "deprecate"
];

/** types that correlates with MAJOR in semantic versioning */
const MAJOR_COMMIT_TYPES = [
    "remove",
];

export type SemverLevel = 0 | 1 | 2 | 3;

export const validateCommitMessage = (message): boolean => {
    // Exceptions.
    // This is a message that's auto-generated by git. Can't do much about it unfortunately. Let's allow it.
    if (message.startsWith("Merge ") || message.startsWith("Revert ")) {
        return null;
    }
    

    // Commit message doesn't fall into the exceptions group. Let's do the validation.
    let [possiblyValidCommitType] = message.split(":");
    possiblyValidCommitType = possiblyValidCommitType.toLowerCase();

    // Let's remove scope if present.
    if (possiblyValidCommitType.match(/\(\S*?\)/)) {
        possiblyValidCommitType = possiblyValidCommitType.replace(/\(\S*?\)/, "");
    }

    possiblyValidCommitType = possiblyValidCommitType
        .replace(/\s/g, "") // Remove all whitespace
        .replace(/\!/g, "") // Remove bang for notify breaking change
        .replace(/()/g, "") // Remove all whitespace
        .replace(/[^a-z]/g, ""); // Only leave [a-z] characters.
    
    if (!DEFAULT_COMMIT_TYPES.includes(possiblyValidCommitType)) {
        return "Invalid commit of type";
    }

    return null;
};

export const getSemverLevel = (message): SemverLevel => {
    //precondition: message must be a valid commit message
    
    let [commitType] = message.split(":");
    
    if (commitType.endsWith("!")) {
        return 3;
    }
    
    const match = commitType.match(/(\w+)(\(\S*?\))?/);
    if (match[2]=="demo") {
        //this is a hardcoded exception because we ignore semver when scope is "demo" ü§∑‚Äç
        return 0;
    } else {
        //otherwise, ignore scope
        commitType = match[1];
    }
    
    if (commitType=="revert") {
        // the level of semantic versioning change cannot be decided from the commit message alone
        return 0;
    }
    
    if (NONE_COMMIT_TYPES.includes(commitType)) {
        // the commit type never correlates with a semantic versioning change
        return 0;
    }
    
    if (MINOR_COMMIT_TYPES.includes(commitType)) {
        // the commit type correlates with a MINOR semantic versioning change
        return 2;
    }
    
    if (MAJOR_COMMIT_TYPES.includes(commitType)) {
        // the commit type correlates with a MAJOR semantic versioning change
        return 3;
    }
    
    // other commit types correlate with a PATCH semantic versioning change
    return 1;
}
